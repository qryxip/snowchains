name: CI

on:
  schedule:
    - cron: '0 0 * * 0'
  push:
    branches:
      - master
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  pull_request:

jobs:
  # ¯\_(ツ)_/¯
  # tarpaulin:
  #   strategy:
  #     fail-fast: false
  #
  #   name: Tarpaulin
  #   runs-on: ubuntu-18.04
  #   if: github.event_name != 'pull_request' || github.event.repository.owner.id == github.event.sender.id
  #
  #   container:
  #     image: xd009642/tarpaulin:latest
  #     options: --security-opt seccomp=unconfined
  #
  #   steps:
  #     - uses: actions/checkout@v1
  #
  #     - name: cargo tarpaulin
  #       run: cargo tarpaulin --all --all-features -lvo Xml -- --test-threads 1
  #
  #     - name: Upload the report for codecov.io
  #       run: |
  #         curl -sSo /tmp/codecov.bash https://codecov.io/bash --retry 10
  #         bash /tmp/codecov.bash
  #       env:
  #         CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    strategy:
      fail-fast: false
      matrix:
        rust_channel:
          - stable
        rust_target_triple:
          - x86_64-pc-windows-msvc
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
        include:
          - rust_channel: stable
            rust_target_triple: x86_64-pc-windows-msvc
            rust_host_triple: x86_64-pc-windows-msvc
            os: windows-2019
          - rust_channel: stable
            rust_target_triple: x86_64-pc-windows-gnu
            rust_host_triple: x86_64-pc-windows-gnu
            os: windows-2019
          - rust_channel: stable
            rust_target_triple: x86_64-apple-darwin
            rust_host_triple: x86_64-apple-darwin
            os: macOS-10.14
          - rust_channel: stable
            rust_target_triple: x86_64-unknown-linux-gnu
            rust_host_triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04
          - rust_channel: stable
            rust_target_triple: x86_64-unknown-linux-musl
            rust_host_triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04

    name: ${{ matrix.rust_channel }}-${{ matrix.rust_target_triple }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v1

      - name: apt-get install
        run: sudo apt-get install musl-tools
        if: matrix.rust_target_triple == 'x86_64-unknown-linux-musl'

      - name: rustup-init
        run: |
          curl -sSo /tmp/rustup-init --tlsv1.2 --proto '=https' --retry 10 https://sh.rustup.rs
          bash /tmp/rustup-init -y --no-modify-path --default-toolchain none
          echo 'export PATH="$HOME/.cargo/bin:$HOME/go/bin:$PATH"' > /tmp/rc.bash
          source /tmp/rc.bash
          rustup default ${{ matrix.rust_channel }}-${{ matrix.rust_host_triple }}
          rustup update ${{ matrix.rust_channel }}-${{ matrix.rust_host_triple }}
          rustup component add clippy
          if ${{ matrix.rust_target_triple == matrix.rust_host_triple }}; then
            rustup component add rustfmt
          else
            rustup target add ${{ matrix.rust_target_triple }}
            echo "export TARGET_TRIPLE='--target ${{ matrix.rust_target_triple }}'" >> /tmp/rc.bash
          fi
        shell: bash

      - name: Display versions
        run: |
          source /tmp/rc.bash
          rustup show
          echo -e '\n'
          rustc -Vv
          echo -e '\n'
          cargo -Vv
          echo -e '\n'
          cargo clippy -V
          echo -e '\n'
          if ${{ matrix.rust_target_triple == matrix.rust_host_triple }}; then
            rustfmt -V
            echo -e '\n'
          fi
          bash --version
        shell: bash

      - name: cargo fmt -- --check
        run: |
          source /tmp/rc.bash
          cargo fmt --all -- --check
        shell: bash
        if: matrix.rust_target_triple == matrix.rust_host_triple

      - name: cargo clippy
        run: |
          source /tmp/rc.bash
          # A hack to avoid IRC
          cargo check --all --all-targets --all-features $TARGET_TRIPLE
          if ${{ matrix.os == 'windows-2019' }}; then
            TO_UNIX_PATHS='xargs cygpath -u'
          else
            TO_UNIX_PATHS=cat
          fi
          cargo metadata --format-version 1 |
            jq -r '.workspace_members[] as $members | .packages[] | select(.id == $members) | .targets[].src_path' |
            $TO_UNIX_PATHS |
            xargs touch
          cargo clippy --all --all-targets --all-features $TARGET_TRIPLE -- -D warnings
        shell: bash

      - name: cargo test
        run: |
          source /tmp/rc.bash
          if ${{ github.event_name != 'pull_request' || github.event.repository.owner.id == github.event.sender.id }}; then
            cargo test --all --all-targets --all-features $TARGET_TRIPLE
          else
            cargo test --all --lib --all-features $TARGET_TRIPLE
            cargo test --all --test batch --all-features $TARGET_TRIPLE
          fi
        shell: bash
        env:
          RUST_BACKTRACE: full
          ATCODER_USERNAME: ${{ secrets.ATCODER_USERNAME }}
          ATCODER_PASSWORD: ${{ secrets.ATCODER_PASSWORD }}
          DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
          CODEFORCES_USERNAME: ${{ secrets.CODEFORCES_USERNAME }}
          CODEFORCES_PASSWORD: ${{ secrets.CODEFORCES_PASSWORD }}
          CODEFORCES_API_KEY: ${{ secrets.CODEFORCES_API_KEY }}
          CODEFORCES_API_SECRET: ${{ secrets.CODEFORCES_API_SECRET }}
          YUKICODER_REVEL_SESSION: ${{ secrets.YUKICODER_REVEL_SESSION }}

      - name: Upload to GitHub Releases
        run: |
          source /tmp/rc.bash
          if ${{ contains(matrix.rust_target_triple, 'pc-windows') }}; then
            EXE=.exe
          fi
          if ${{ matrix.rust_target_triple == matrix.rust_host_triple }}; then
            RELEASE_TARGET="./target/release/${GITHUB_REPOSITORY#*/}$EXE"
          else
            RELEASE_TARGET="./target/${{ matrix.rust_target_triple }}/release/${GITHUB_REPOSITORY#*/}$EXE"
          fi
          ASSET_STEM="${GITHUB_REPOSITORY#*/}-${GITHUB_REF#refs/tags/}-${{ matrix.rust_target_triple }}"
          go get github.com/tcnksm/ghr
          cargo build --release --all-features $TARGET_TRIPLE
          git archive -o "./$ASSET_STEM.tar" --prefix "$ASSET_STEM/" HEAD
          tar -xf "./$ASSET_STEM.tar"
          mv "$RELEASE_TARGET" "./$ASSET_STEM/"
          if ${{ contains(matrix.rust_target_triple, 'pc-windows') }}; then
            ASSET="./$ASSET_STEM.zip"
            7z a "$ASSET" "./$ASSET_STEM"
            zipinfo "$ASSET"
          else
            ASSET="./$ASSET_STEM.tar.gz"
            tar -czvf "$ASSET" "./$ASSET_STEM"
          fi
          ghr "${GITHUB_REF#refs/tags/}" "$ASSET"
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: startsWith(github.ref, 'refs/tags/')

  publish:
    name: cargo pubish
    runs-on: ubuntu-18.04
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v1

      - name: rustup-init
        run: |
          curl -sSo /tmp/rustup-init --tlsv1.2 --proto '=https' --retry 10 https://sh.rustup.rs
          bash /tmp/rustup-init -y --no-modify-path
          ~/.cargo/bin/rustup update

      - name: Display versions
        run: |
          ~/.cargo/bin/rustc -Vv
          echo -e '\n'
          ~/.cargo/bin/cargo -Vv

      - name: cargo publish
        run: ~/.cargo/bin/cargo publish --all-features --verbose --token "$CRATES_IO_TOKEN"
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
