name: CI

on:
  schedule:
    - cron: '0 0 * * 0'
  push:
    branches:
      - master
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+**'
  pull_request:

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup stable-x86_64-unknown-linux-gnu
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          default: true

      - name: '`cargo fmt --all -- --check`'
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  build:
    strategy:
      fail-fast: false
      matrix:
        name:
          - stable-x86_64-pc-windows-msvc
          - stable-x86_64-pc-windows-gnu
          - stable-x86_64-apple-darwin
          - stable-x86_64-unknown-linux-gnu
          - stable-x86_64-unknown-linux-musl
          # - beta-x86_64-unknown-linux-gnu
        include:
          - { name: stable-x86_64-pc-windows-msvc   , channel: stable, target_triple: x86_64-pc-windows-msvc   , host_triple: x86_64-pc-windows-msvc  , os: windows-latest }
          - { name: stable-x86_64-pc-windows-gnu    , channel: stable, target_triple: x86_64-pc-windows-gnu    , host_triple: x86_64-pc-windows-gnu   , os: windows-latest }
          - { name: stable-x86_64-apple-darwin      , channel: stable, target_triple: x86_64-apple-darwin      , host_triple: x86_64-apple-darwin     , os: macos-latest   }
          - { name: stable-x86_64-unknown-linux-gnu , channel: stable, target_triple: x86_64-unknown-linux-gnu , host_triple: x86_64-unknown-linux-gnu, os: ubuntu-18.04   }
          - { name: stable-x86_64-unknown-linux-musl, channel: stable, target_triple: x86_64-unknown-linux-musl, host_triple: x86_64-unknown-linux-gnu, os: ubuntu-18.04   }
          # - { name: beta-x86_64-unknown-linux-gnu   , channel: beta  , target_triple: x86_64-unknown-linux-gnu , host_triple: x86_64-unknown-linux-gnu, os: ubuntu-18.04   }

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: '`sudo apt-get install musl-tools`'
        run: sudo apt-get install musl-tools
        if: matrix.target_triple == 'x86_64-unknown-linux-musl'

      - name: Setup ${{ matrix.channel }}-${{ matrix.host_triple }} (target = ${{ matrix.target_triple }})
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.channel }}-${{ matrix.host_triple }}
          target: ${{ matrix.target_triple }}
          default: true
          profile: default

      - name: '`cargo clippy --workspace --all-targets --all-features --target ${{ matrix.target_triple }} -- -D warnings`'
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace --all-targets --all-features --target ${{ matrix.target_triple }} -- -D warnings
        if: matrix.channel == 'stable'

      - name: Determine `cargo test` targets
        id: cargo_test_targets
        run: |
          if ${{ !!secrets }}; then
            echo '::set-output name=targets::--workspace --all-targets'
          else
            echo '::set-output name=targets::--workspace --lib --test batch'
          fi
        shell: bash

      - name: '`cargo test --no-fail-fast --all-features ${{ steps.cargo_test_targets.outputs.targets }} --target ${{ matrix.target_triple }}`'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast --all-features ${{ steps.cargo_test_targets.outputs.targets }} --target ${{ matrix.target_triple }}
        env:
          RUST_BACKTRACE: full
          ATCODER_USERNAME: ${{ secrets.ATCODER_USERNAME }}
          ATCODER_PASSWORD: ${{ secrets.ATCODER_PASSWORD }}
          DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
          CODEFORCES_USERNAME: ${{ secrets.CODEFORCES_USERNAME }}
          CODEFORCES_PASSWORD: ${{ secrets.CODEFORCES_PASSWORD }}
          CODEFORCES_API_KEY: ${{ secrets.CODEFORCES_API_KEY }}
          CODEFORCES_API_SECRET: ${{ secrets.CODEFORCES_API_SECRET }}
          YUKICODER_REVEL_SESSION: ${{ secrets.YUKICODER_REVEL_SESSION }}

  release:
    strategy:
      fail-fast: true
      matrix:
        target_triple:
          - x86_64-pc-windows-msvc
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
        include:
          - { target_triple: x86_64-pc-windows-msvc   , host_triple: x86_64-pc-windows-msvc  , os: windows-latest }
          - { target_triple: x86_64-pc-windows-gnu    , host_triple: x86_64-pc-windows-gnu   , os: windows-latest }
          - { target_triple: x86_64-apple-darwin      , host_triple: x86_64-apple-darwin     , os: macos-latest   }
          - { target_triple: x86_64-unknown-linux-gnu , host_triple: x86_64-unknown-linux-gnu, os: ubuntu-18.04   }
          - { target_triple: x86_64-unknown-linux-musl, host_triple: x86_64-unknown-linux-gnu, os: ubuntu-18.04   }

    name: GitHub Release (${{ matrix.target_triple }})
    runs-on: ${{ matrix.os }}
    needs: [rustfmt, build]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: '`sudo apt-get install musl-tools`'
        run: sudo apt-get install musl-tools
        if: matrix.target_triple == 'x86_64-unknown-linux-musl'

      - name: Setup stable-${{ matrix.host_triple }} (target = ${{ matrix.target_triple }})
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-${{ matrix.host_triple }}
          target: ${{ matrix.target_triple }}
          default: true
          profile: minimal

      - name: '`cargo build --release --all-features --target ${{ matrix.target_triple }}`'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features --target ${{ matrix.target_triple }}

      - name: Create an asset
        id: asset
        run: |
          if ${{ contains(matrix.target_triple, 'pc-windows') }}; then
            EXE=.exe
          fi
          BIN_TARGET=snowchains
          EXECUTABLE="./target/${{ matrix.target_triple }}/release/$BIN_TARGET$EXE"
          ASSET_STEM="$BIN_TARGET-${GITHUB_REF#refs/tags/}-${{ matrix.target_triple }}"
          git archive -o "./$ASSET_STEM.tar" --prefix "$ASSET_STEM/" HEAD
          tar -xf "./$ASSET_STEM.tar"
          mv "$EXECUTABLE" ./Cargo.lock "./$ASSET_STEM/"
          if ${{ contains(matrix.target_triple, 'pc-windows') }}; then
            ASSET="./$ASSET_STEM.zip"
            7z a "$ASSET" "./$ASSET_STEM"
            zipinfo "$ASSET"
          else
            ASSET="./$ASSET_STEM.tar.gz"
            tar -czvf "$ASSET" "./$ASSET_STEM"
          fi
          echo "::set-output name=asset::$ASSET"
        shell: bash

      - name: GH Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.asset.outputs.asset }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish
    runs-on: ubuntu-18.04
    needs: [rustfmt, build, release]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup stable-x86_64-unknown-linux-gnu
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          default: true
          profile: minimal

      - name: '`cargo install --git https://github.com/sunng87/cargo-release --rev 943c64384f80463b4ca844230a360c1f7c821165 --debug cargo-release`'
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --git https://github.com/sunng87/cargo-release --rev 943c64384f80463b4ca844230a360c1f7c821165 --debug cargo-release

      - name: '`cargo release --workspace --skip-push --skip-tag --no-dev-version --token "$CRATES_IO_TOKEN" --no-confirm`'
        uses: actions-rs/cargo@v1
        with:
          command: release
          args: --workspace --skip-push --skip-tag --no-dev-version --token ${{ secrets.CRATES_IO_TOKEN }} --no-confirm
